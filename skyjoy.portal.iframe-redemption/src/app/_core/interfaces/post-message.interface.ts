export enum POST_MESSAGE_ACTION {
  EXIT = 'EXIT',
  NAVIGATE_IN_APP = 'NAVIGATE_IN_APP',
  NAVIGATE_TO_PAGE = 'NAVIGATE_TO_PAGE',
  NAVIGATE_TO_BROWSER = 'NAVIGATE_TO_BROWSER',
  SHARE = 'SHARE',

  // UNUSED
  CREATE = 'CREATE',
  READ = 'READ',
  UPDATE = 'UPDATE',
  DELETE = 'DELETE',

  USER_LOGIN = 'USER_LOGIN',
  USER_LOGOUT = 'USER_LOGOUT',
  DATA_LOADED = 'DATA_LOADED',
  DATA_UPDATED = 'DATA_UPDATED',
  FORM_SUBMIT = 'FORM_SUBMIT',
  FORM_RESET = 'FORM_RESET',
  SHOW_NOTIFICATION = 'SHOW_NOTIFICATION',
  HIDE_NOTIFICATION = 'HIDE_NOTIFICATION',
  SEND_MESSAGE = 'SEND_MESSAGE',
  RECEIVE_MESSAGE = 'RECEIVE_MESSAGE',

  BACK_TO_APP = 'BACK_TO_APP', // ~ EXIT
  BACK = 'BACK',
  HOME = 'HOME',
  REQUEST_OTP = 'REQUEST_OTP',
  CONFIRM_OTP = 'CONFIRM_OTP',
  OPEN_BROWSER = 'OPEN_BROWSER',
  REQUEST_HEADER_ACTION = 'REQUEST_HEADER_ACTION',
  NULL = 'NULL'
}

export const MESSAGE_CHANNEL = {
  GJ_WEBVIEW: 'GJ_WEBVIEW',
  PARTNER_APP: 'PARTNER_APP',
  GJ_WEBVIEW_PARTNER_APP: 'GJ_WEBVIEW_PARTNER_APP'
};

export enum MESSAGE_CHANNEL_ENUM {
  GJ_WEBVIEW = 'GJ_WEBVIEW', // Vikki app using
  GJ_WEBVIEW_PARTNER_APP = 'GJ_WEBVIEW_PARTNER_APP', // => webview partner-app => app
  PARTNER_APP = 'PARTNER_APP',
  GJ_APP_WEBVIEW = 'GJ_APP_WEBVIEW'
}

export const POST_MESSAGE_TOPIC_NAME = {
  NAVIGATE_TO_BROWSER: `${MESSAGE_CHANNEL.GJ_WEBVIEW}_${POST_MESSAGE_ACTION.NAVIGATE_TO_BROWSER}`,
  REQUEST_OTP: `${MESSAGE_CHANNEL.GJ_WEBVIEW}_${POST_MESSAGE_ACTION.REQUEST_OTP}`,
  BACK_TO_APP: `${MESSAGE_CHANNEL.GJ_WEBVIEW}_${POST_MESSAGE_ACTION.BACK_TO_APP}`,

  REQUEST_HEADER_ACTION: `${MESSAGE_CHANNEL.GJ_WEBVIEW_PARTNER_APP}_${POST_MESSAGE_ACTION.REQUEST_HEADER_ACTION}`,
  EXIT: `${MESSAGE_CHANNEL.GJ_WEBVIEW_PARTNER_APP}_${POST_MESSAGE_ACTION.EXIT}`
};

export interface ISendMessageContent {
  action: POST_MESSAGE_ACTION;
  topic?: string;
  data?: any;
}

export interface IReceiveMessageContent {
  action: POST_MESSAGE_ACTION;
  topic?: string;
  data?: any;
}

export interface IPayloadPostMessage {
  channel: MESSAGE_CHANNEL_ENUM;
  message: ISendMessageContent | IReceiveMessageContent;
}
